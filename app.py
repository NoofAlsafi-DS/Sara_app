import streamlit as st
import pickle
from scipy.sparse import hstack
from urllib.parse import urlparse
from pathlib import Path

st.set_page_config(page_title="URL Malware Detector", page_icon="๐", layout="centered")
st.title("๐ URL Malware Detector")

# ====== ุชุญููู ุงููููุฐุฌ ูุงููุญููุงุช ======
@st.cache_resource
def load_artifacts():
    clf = pickle.load(open("model.pkl","rb"))
    tfidf = pickle.load(open("tfidf.pkl","rb"))
    man = pickle.load(open("manual.pkl","rb"))
    return clf, tfidf, man

clf, tfidf, man = load_artifacts()

# ====== ุฅุนุฏุงุฏุงุช ุงููุงุฌูุฉ ======
colA, colB = st.columns([2,1])
with colB:
    threshold = st.slider("ุนุชุจุฉ ุงูุญูู ุนูู (ุถุงุฑ)", 0.5, 0.99, 0.9, 0.01)

with colA:
    url = st.text_input("ุฃุฏุฎู ุงูุฑุงุจุท ููุง:", placeholder="https://example.com/login")

# ุตูุฑ ุงูุญุงูุฉ (ููููุงุช ูุญููุฉ ุงุฎุชูุงุฑูุฉ)
MAL_IMG = Path("malicious.png")
BEN_IMG = Path("benign.png")

def show_status(label_str: str, prob: float):
    """ุนุฑุถ ุตูุฑุฉ/ุฑูุฒ + ูุนูููุงุช ุงููุชูุฌุฉ."""
    col1, col2 = st.columns([1,2])
    with col1:
        if label_str == "ุถุงุฑ":
            if MAL_IMG.exists():
                st.image(str(MAL_IMG), use_container_width=True)
            else:
                st.markdown("### ๐จ")
        else:
            if BEN_IMG.exists():
                st.image(str(BEN_IMG), use_container_width=True)
            else:
                st.markdown("### ๐ก๏ธ")
    with col2:
        st.markdown(f"### ุงููุชูุฌุฉ: **{label_str}**")
        if prob is not None:
            st.metric("ุงุญุชูุงู ุงูุถุงุฑ (model)", f"{prob:.3f}")
            st.caption(f"ุงูุนุชุจุฉ ุงูุญุงููุฉ: {threshold:.2f} โ ุฅุฐุง ูุงู ุงูุงุญุชูุงู โฅ ุงูุนุชุจุฉ โ ูุตููู ยซุถุงุฑยป")

# ====== ุฒุฑ ุฃูุซูุฉ ุณุฑูุนุฉ ======
with st.expander("๐งช ุฃูุซูุฉ ุณุฑูุนุฉ"):
    ex1, ex2, ex3, ex4 = st.columns(4)
    if ex1.button("๐ bit.ly/win-prize"):
        url = "http://bit.ly/win-prize-now?ref=secure-login"
    if ex2.button("๐ GitHub"):
        url = "https://github.com/pytorch/pytorch"
    if ex3.button("๐ IP/login.php"):
        url = "http://192.168.1.44/login.php"
    if ex4.button("๐ซ University portal"):
        url = "https://university.edu/portal"
    if url:
        st.info(f"ุงููุซุงู ุงููุฎุชุงุฑ: {url}")

# ====== ุงูุชูุจุค ======
def predict_one(u: str, th: float):
    Xt = tfidf.transform([u])
    Xm = man.transform([u])
    X = hstack([Xt, Xm])
    proba = clf.predict_proba(X)[0][1] if hasattr(clf, "predict_proba") else None
    # ูุฑุงุฑ ุจุงุณุชุฎุฏุงู ุงูุนุชุจุฉ
    if proba is not None:
        pred = 1 if proba >= th else 0
    else:
        pred = clf.predict(X)[0]
    return pred, proba

go = st.button("ุชุญููู")
if go and url.strip():
    # ุชุทุจูุน ุจุณูุท
    u = url.strip()
    # ุชูุจุค
    pred, prob = predict_one(u, threshold)
    label_str = "ุถุงุฑ" if pred == 1 else "ุณููู"
    show_status(label_str, prob)

    # ูุนูููุงุช ุฅุถุงููุฉ ูููุฏุฉ ูููุณุชุฎุฏู
    with st.container(border=True):
        st.markdown("**ุชูุงุตูู ุงูุฑุงุจุท**")
        try:
            p = urlparse(u)
            st.write({"scheme": p.scheme, "netloc": p.netloc, "path": p.path, "query": p.query})
        except Exception:
            st.write("ุชุนุฐูุฑ ุชุญููู ุงูุฑุงุจุท.")

    # ุชุญุฐูุฑ ุนููู ูู ุญุงูุฉ ุงูุณููู ูุน ุงุญุชูุงู ูุฑุชูุน
    if prob is not None:
        if label_str == "ุณููู" and prob >= (threshold - 0.05):
            st.warning("ุงูุฑุงุจุท ุตูููู ยซุณูููยป ููู ุงุญุชูุงู ุงูุถุงุฑ ูุฑูุจ ูู ุงูุนุชุจุฉ. ููุณุชุญุณู ุงูุญุฐุฑ.")

# ====== ููุงุญุธุงุช ======
st.caption("""
**ุชูููุญ:** ุถุน ููููู ุตูุฑ ูู ููุณ ูุฌูุฏ ุงูุชุทุจูู:
- `malicious.png` ููุงุฌูุฉ ยซุถุงุฑยป
- `benign.png` ููุงุฌูุฉ ยซุณูููยป

ุฅู ูู ุชูุฌุฏ ุงูุตูุฑุ ูุณุชุฎุฏู ุงูุชุทุจูู ุฑููุฒูุง ุจุฏููุฉ (๐จ / ๐ก๏ธ).
ููููู ุชุบููุฑ ุงูุนุชุจุฉ ูู ุงูุดุฑูุท ููุญุตูู ุนูู ุญุณุงุณูุฉ ุฃุนูู ุฃู ุฃูู.
""")
